"use strict";
/*---------------------------------------------------------------------------------------------
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 *
 * 2018-2020 Qiming Zhao <chemzqm@gmail.com>
 * 2020 Weirong Xu <weirongxu.raidou@gmail.com>
 *--------------------------------------------------------------------------------------------*/
/**
 * modified from: https://github.com/neoclide/coc.nvim/blob/5cf5117b9fbbd32d4e4bab2116c36685fee0d881/src/__tests__/helper.ts
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jestHelper = exports.createTmpFile = exports.rmdir = exports.JestHelper = void 0;
const cp = __importStar(require("child_process"));
const events_1 = require("events");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const uuid_1 = require("uuid");
// @ts-ignore
const attach_1 = __importDefault(require("coc.nvim/attach"));
// @ts-ignore
const processes_1 = require("coc.nvim/util/processes");
// @ts-ignore
const completion_1 = __importDefault(require("coc.nvim/completion"));
// @ts-ignore
const workspace_1 = __importDefault(require("coc.nvim/workspace"));
const coc_nvim_1 = require("coc.nvim");
// @ts-ignore
global.__TEST__ = true;
const nullChannel = {
    content: '',
    show: () => { },
    dispose: () => { },
    name: 'null',
    append: () => { },
    appendLine: () => { },
    clear: () => { },
    hide: () => { },
};
process.on('uncaughtException', (err) => {
    const msg = `Uncaught exception: ${err.stack}`;
    // eslint-disable-next-line no-console
    console.error(msg);
});
class JestHelper extends events_1.EventEmitter {
    constructor(testsDir) {
        super();
        this.testsDir = testsDir;
        this.setMaxListeners(99);
    }
    set nvim(_nvim) {
        this._nvim = _nvim;
    }
    get nvim() {
        if (!this._nvim) {
            throw new Error('require to execute jestHelper.setup() in beforeAll()');
        }
        return this._nvim;
    }
    set plugin(_plugin) {
        this._plugin = _plugin;
    }
    get plugin() {
        if (!this._plugin) {
            throw new Error('require to execute jestHelper.setup() in beforeAll()');
        }
        return this._plugin;
    }
    boot() {
        beforeAll(async () => {
            try {
                await this.setup();
            }
            catch (e) {
                console.error(e);
            }
        });
        afterAll(async () => {
            await this.shutdown();
        });
        afterEach(async () => {
            await this.reset();
        });
    }
    setupNvim() {
        var _a;
        const vimrc = path_1.default.resolve(__dirname, 'vimrc');
        const proc = (this.proc = cp.spawn((_a = process.env.COC_TEST_NVIM) !== null && _a !== void 0 ? _a : 'nvim', ['-u', vimrc, '-i', 'NONE', '--embed'], {
            cwd: __dirname,
        }));
        const plugin = (0, attach_1.default)({ proc });
        this.nvim = plugin.nvim;
    }
    async setup() {
        const vimrcPath = path_1.default.join(this.testsDir, 'vimrc');
        const proc = (this.proc = cp.spawn('nvim', ['-u', vimrcPath, '-i', 'NONE', '--embed'], {
            cwd: this.testsDir,
        }));
        const plugin = (this.plugin = (0, attach_1.default)({ proc }));
        this.nvim = plugin.nvim;
        this.nvim.uiAttach(160, 80, {}).catch((e) => {
            console.error(e);
        });
        proc.on('exit', () => {
            this.proc = undefined;
        });
        this.nvim.on('notification', (method, args) => {
            if (method === 'redraw') {
                for (const arg of args) {
                    const event = arg[0];
                    this.emit(event, arg.slice(1));
                    if (event == 'put') {
                        const arr = arg.slice(1).map((o) => o[0]);
                        const line = arr.join('').trim();
                        if (line.length > 3) {
                            // console.log(line)
                        }
                    }
                }
            }
        });
        return new Promise((resolve) => {
            plugin.once('ready', resolve);
        });
    }
    async shutdown() {
        if (this.plugin)
            this.plugin.dispose();
        this.nvim.removeAllListeners();
        this._nvim = undefined;
        if (this.proc) {
            this.proc.unref();
            (0, processes_1.terminate)(this.proc);
            this.proc = null;
        }
        await this.wait(60);
    }
    async triggerCompletion(source) {
        await this.nvim.call('coc#start', { source });
    }
    async waitPopup() {
        const visible = await this.nvim.call('pumvisible');
        if (visible)
            return;
        // @ts-ignore
        const res = await coc_nvim_1.events.race(['MenuPopupChanged'], 2000);
        if (!res)
            throw new Error('wait pum timeout after 2s');
    }
    async waitPreviewWindow() {
        for (let i = 0; i < 40; i++) {
            await this.wait(50);
            const has = await this.nvim.call('coc#list#has_preview');
            if (has > 0)
                return;
        }
        throw new Error('timeout after 2s');
    }
    async waitFloat() {
        for (let i = 0; i < 50; i++) {
            await this.wait(20);
            const winid = await this.nvim.call('GetFloatWin');
            if (winid)
                return winid;
        }
        throw new Error('timeout after 2s');
    }
    async selectCompleteItem(idx) {
        await this.nvim.call('nvim_select_popupmenu_item', [idx, true, true, {}]);
    }
    async doAction(method, ...args) {
        return await this.plugin.cocAction(method, ...args);
    }
    async synchronize() {
        const doc = await workspace_1.default.document;
        doc.forceSync();
    }
    async reset() {
        const mode = await this.nvim.mode;
        if (mode.blocking && mode.mode == 'r') {
            await this.nvim.input('<cr>');
        }
        else if (mode.mode != 'n' || mode.blocking) {
            await this.nvim.call('feedkeys', [String.fromCharCode(27), 'in']);
        }
        completion_1.default.stop();
        workspace_1.default.reset();
        await this.nvim.command('silent! %bwipeout!');
        await this.nvim.command('setl nopreviewwindow');
        await this.wait(30);
        await workspace_1.default.document;
    }
    async pumvisible() {
        const res = (await this.nvim.call('pumvisible', []));
        return res === 1;
    }
    wait(ms = 30) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, ms);
        });
    }
    async visible(word, source) {
        await this.waitPopup();
        const context = (await this.nvim.getVar('coc#_context'));
        const items = context.candidates;
        if (!items)
            return false;
        const item = items.find((o) => o.word == word);
        if (!item || !item.user_data)
            return false;
        try {
            const arr = item.user_data.split(':', 2);
            if (source && arr[0] !== source) {
                return false;
            }
        }
        catch (e) {
            return false;
        }
        return true;
    }
    async notVisible(word) {
        const items = await this.getItems();
        return items.findIndex((o) => o.word === word) === -1;
    }
    async getItems() {
        const visible = await this.pumvisible();
        if (!visible) {
            return [];
        }
        const context = (await this.nvim.getVar('coc#_context'));
        const items = context.candidates;
        return items || [];
    }
    async edit(file) {
        if (!file || !path_1.default.isAbsolute(file)) {
            file = path_1.default.join(__dirname, file ? file : `${(0, uuid_1.v4)()}`);
        }
        const escaped = (await this.nvim.call('fnameescape', file));
        await this.nvim.command(`edit ${escaped}`);
        const doc = await workspace_1.default.document;
        return doc.buffer;
    }
    async createDocument(name) {
        const buf = await this.edit(name);
        const doc = workspace_1.default.getDocument(buf.id);
        if (!doc) {
            return await workspace_1.default.document;
        }
        return doc;
    }
    async listInput(input) {
        // @ts-ignore
        await coc_nvim_1.events.fire('InputChar', ['list', input, 0]);
    }
    async getMarkers(bufnr, ns) {
        return (await this.nvim.call('nvim_buf_get_extmarks', [
            bufnr,
            ns,
            0,
            -1,
            {},
        ]));
    }
    async getCmdline() {
        let str = '';
        for (let i = 1, l = 70; i < l; i++) {
            const ch = await this.nvim.call('screenchar', [79, i]);
            if (ch === -1) {
                break;
            }
            str += String.fromCharCode(ch);
        }
        return str.trim();
    }
    updateConfiguration(key, value) {
        const { configurations } = workspace_1.default;
        const curr = workspace_1.default.getConfiguration(key);
        configurations.updateUserConfig({ [key]: value });
        return () => {
            configurations.updateUserConfig({ [key]: curr });
        };
    }
    async mockFunction(name, result) {
        const content = `
    function! ${name}(...)
      return ${typeof result == 'number' ? result : JSON.stringify(result)}
    endfunction
    `;
        const file = await createTmpFile(content);
        await this.nvim.command(`source ${file}`);
    }
    async items() {
        const context = (await this.nvim.getVar('coc#_context'));
        return context['candidates'] || [];
    }
    async screenLine(line) {
        let res = '';
        for (let i = 1; i <= 80; i++) {
            const ch = await this.nvim.call('screenchar', [line, i]);
            res = res + String.fromCharCode(ch);
        }
        return res;
    }
    async getWinLines(winid) {
        return (await this.nvim.eval(`getbufline(winbufnr(${winid}), 1, '$')`));
    }
    async getFloat() {
        const wins = await this.nvim.windows;
        let floatWin;
        for (const win of wins) {
            const f = await win.getVar('float');
            if (f) {
                floatWin = win;
            }
        }
        return floatWin;
    }
    async getFloats() {
        const ids = await this.nvim.call('coc#float#get_float_win_list', []);
        if (!ids)
            return [];
        return ids.map((id) => this.nvim.createWindow(id));
    }
    async getExtmarkers(bufnr, ns) {
        const res = await this.nvim.call('nvim_buf_get_extmarks', [
            bufnr,
            ns,
            0,
            -1,
            { details: true },
        ]);
        return res.map((o) => {
            return [o[1], o[2], o[3].end_row, o[3].end_col, o[3].hl_group];
        });
    }
    async waitFor(method, args, value) {
        let find = false;
        for (let i = 0; i < 40; i++) {
            await this.wait(50);
            const res = (await this.nvim.call(method, args));
            if (res == value ||
                (value instanceof RegExp && value.test(res.toString()))) {
                find = true;
                break;
            }
        }
        if (!find) {
            throw new Error(`waitFor ${value} timeout`);
        }
    }
    async waitValue(fn, value) {
        let find = false;
        for (let i = 0; i < 40; i++) {
            await this.wait(50);
            const res = fn();
            if (res == value) {
                find = true;
                break;
            }
        }
        if (!find) {
            throw new Error(`waitValue ${value} timeout`);
        }
    }
    createNullChannel() {
        return nullChannel;
    }
}
exports.JestHelper = JestHelper;
function rmdir(dir) {
    if (typeof fs_1.default['rm'] === 'function') {
        fs_1.default['rmSync'](dir, { recursive: true });
    }
    else {
        fs_1.default.rmdirSync(dir, { recursive: true });
    }
}
exports.rmdir = rmdir;
async function createTmpFile(content) {
    const tmpFolder = path_1.default.join(os_1.default.tmpdir(), `coc-${process.pid}`);
    if (!fs_1.default.existsSync(tmpFolder)) {
        fs_1.default.mkdirSync(tmpFolder);
    }
    const fsPath = path_1.default.join(tmpFolder, (0, uuid_1.v4)());
    await util_1.default.promisify(fs_1.default.writeFile)(fsPath, content, 'utf8');
    return fsPath;
}
exports.createTmpFile = createTmpFile;
exports.jestHelper = new JestHelper(path_1.default.join(__dirname, '../../tests'));
