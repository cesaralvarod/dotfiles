import { OutputChannel, Disposable } from 'coc.nvim';
declare type AsyncCatchFn = (...args: any) => any | Promise<any>;
declare const levelList: readonly ["trace", "debug", "info", "warn", "error", "fatal", "off"];
declare type LevelStatus = typeof levelList[number];
declare type LevelLog = Exclude<LevelStatus, 'off'>;
export declare class HelperLogger implements Disposable {
    readonly channelName: string;
    private outputChannel_?;
    private timeMarkers;
    private levelStatus;
    private levelNumber;
    constructor(channelName: string);
    /**
     * Default level is 'trace'
     */
    set level(level: LevelStatus);
    get level(): LevelStatus;
    dispose(): void;
    get outputChannel(): OutputChannel;
    appendLine(line: string): void;
    log(levelName: LevelLog, data: string | Error): void;
    trace(line: string): void;
    debug(line: string): void;
    info(line: string): void;
    warn(line: string): void;
    /**
     * Log and print error
     */
    error(data: any): void;
    fatal(data: any): void;
    time(label?: string): void;
    /**
     * @returns milliseconds
     */
    timeElapsed(label?: string): number | undefined;
    timeLog(label?: string): void;
    measureTime<T>(task: () => Promise<T>): Promise<[T, number]>;
    measureTime<T>(task: () => T): [T, number];
    measureTask<T>(task: () => Promise<T>, label?: string, level?: LevelLog): Promise<T>;
    measureTask<T>(task: () => T, label?: string, level?: LevelLog): T;
    /**
     * Wrap the async function and catch the error
     */
    asyncCatch(fn: AsyncCatchFn): AsyncCatchFn;
    prettyPrint(...data: any[]): void;
}
export declare const helperLogger: HelperLogger;
export declare function prettyObject(...data: any[]): string;
export declare function prettyPrint(...data: any[]): void;
export {};
